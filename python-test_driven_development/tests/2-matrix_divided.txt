>>> from importlib import import_module
>>> matrix_divided = import_module('2-matrix_divided').matrix_divided

# Test Case 1: Correct output for integer division
>>> matrix = [[3]]
>>> matrix_divided(matrix, 3)
[[1.0]]

# Test Case 2: Correct output for negative divisor
>>> matrix = [[3, 9], [12, 15]]
>>> matrix_divided(matrix, -3)
[[-1.0, -3.0], [-4.0, -5.0]]

# Test Case 3: ZeroDivisionError for zero divisor
>>> matrix = [[3, 9], [12, 15]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test Case 4: TypeError for non-integer divisor
>>> matrix = [[3, 9], [12, 15]]
>>> matrix_divided(matrix, 'a')
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test Case 5: TypeError for non-list of lists matrix
>>> matrix = [3, 9]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test Case 6: TypeError for uneven matrix rows
>>> matrix = [[3, 9], [12, 15, 3]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test Case 7: TypeError for matrix with non-numeric elements
>>> matrix = [[3, "9"], [15, 3]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test Case 8: Matrix with float infinity and divisor
>>> matrix = [[float('inf')]]
>>> matrix_divided(matrix, 1)
[[float('inf')]]

# Test Case 9: Matrix with NaN and divisor
>>> matrix = [[float('nan')]]
>>> matrix_divided(matrix, 1)
[[float('nan')]]

# Test Case 10: Missing arguments (handled externally)
>>> matrix_divided()
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided([[1]], 1, 1)
Traceback (most recent call last):
    ...
TypeError: matrix_divided() takes 2 positional arguments but 3 were given
